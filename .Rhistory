list_of_data_to_clean$messy_aki.xlsx %>%
# Extract only the essential rows
slice(5:25) %>%
# Remove empty columns
select(-6) %>%
# Set the first row as column names
set_names(.,.[1,]) %>%
# Remove redudant first row
slice(-1) %>%
# Tidy column names
rename_with(~tolower(str_replace(.x, "^(?i)day.*?(\\d).*","day\\1_gfr"))) %>%
rename_with(~str_replace_all(.x,"\\s+","_")) %>%
# Tidy the entries of birthdate column
arrange(desc(dob)) %>% # Arrange to detect patterns of anomalies
# Convert 5-digit general numbers to ISO dates
mutate(dob_temp = openxlsx::convertToDate(dob), .after = dob) %>%
# Edit special cases
mutate(dob_temp = case_match(dob, "may 5 1970" ~ ymd("1970-05-05"), "5=11-1984"~ ymd("1984-05-11"), .default = dob_temp))  %>%
# Rename "dob" to "birthdate" and remove "dob", "dob_temp"
mutate(birthdate = dob_temp, .after = study_id) %>%
select(-dob_temp,-dob) %>%
mutate(race = str_to_sentence(race)) %>%
mutate(sex = if_else(str_detect(sex,"^(?i)M"), "Male","Female")) %>%
mutate(hispanic = if_else(str_detect(hispanic, "^(?i)N"), "Not Hispanic", "Hispanic")) %>%
mutate(day2_gfr_poor = if_else(str_detect(day2_gfr,"poor"),1,0)) %>%
mutate(across(c(study_id,admission_gfr:day5_gfr), ~as.integer(str_extract(.x,"^\\d+")))) %>%
# count(sediment) %>%
# pull(sediment) %>%
# cbind %>%
# map2(.y = c(
#   "\" ~ \"many epithelial cell",
#   "\" ~ \"many epithelial cell",
#   "\" ~ \"many granular",
#   "\" ~ \"muddy brown",
#   "\" ~ \"muddy brown",
#   "\" ~ \"rare granular",
#   "\" ~ \"rare granular"), .f = ~paste0(.x,.y)) %>%
# unlist %>%
# paste0("\"",.,"\"", collapse = ",\n ") %>%
# writeLines(con = "clipboard")
mutate(sediment = case_match(
sediment,
"many epi cell casts" ~ "many epithelial cell",
"many epithelial cell casts" ~ "many epithelial cell",
"many granular casts" ~ "many granular",
"muddy brown" ~ "muddy brown",
"muddy brown casts" ~ "muddy brown",
"rare gran casts" ~ "rare granular",
"rare granular casts" ~ "rare granular",
.default = sediment
)) %>%
mutate(across(hd_catheter:av_fistula,
~if_else(str_detect(.x,"^(?i)N"),"No","Yes"))) %>%
arrange(study_id)
#| warning: false
list_of_data_to_clean$messy_aki.xlsx %>%
# Extract only the essential rows
slice(5:25) %>%
# Remove empty columns
select(-6) %>%
# Set the first row as column names
set_names(.,.[1,]) %>%
# Remove redudant first row
slice(-1) %>%
# Tidy column names
rename_with(~tolower(str_replace(.x, "^(?i)day.*?(\\d).*","day\\1_gfr"))) %>%
rename_with(~str_replace_all(.x,"\\s+","_")) %>%
# Tidy the entries of birthdate column
arrange(desc(dob)) %>% # Arrange to detect patterns of anomalies
# Convert 5-digit general numbers to ISO dates
mutate(dob_temp = openxlsx::convertToDate(dob), .after = dob) %>%
# Edit special cases
mutate(dob_temp = case_match(dob, "may 5 1970" ~ ymd("1970-05-05"), "5=11-1984"~ ymd("1984-05-11"), .default = dob_temp))  %>%
# Rename "dob" to "birthdate" and remove "dob", "dob_temp"
mutate(birthdate = dob_temp, .after = study_id) %>%
select(-dob_temp,-dob) %>%
mutate(race = str_to_sentence(race)) %>%
mutate(sex = if_else(str_detect(sex,"^(?i)M"), "Male","Female")) %>%
mutate(hispanic = if_else(str_detect(hispanic, "^(?i)N"), "Not Hispanic", "Hispanic")) %>%
mutate(day2_gfr_poor = if_else(str_detect(day2_gfr,"poor"),1,0)) %>%
mutate(across(c(study_id,admission_gfr:day5_gfr), ~as.integer(str_extract(.x,"^\\d+")))) %>%
# count(sediment) %>%
# pull(sediment) %>%
# cbind %>%
# map2(.y = c(
#   "\" ~ \"many epithelial cell",
#   "\" ~ \"many epithelial cell",
#   "\" ~ \"many granular",
#   "\" ~ \"muddy brown",
#   "\" ~ \"muddy brown",
#   "\" ~ \"rare granular",
#   "\" ~ \"rare granular"), .f = ~paste0(.x,.y)) %>%
# unlist %>%
# paste0("\"",.,"\"", collapse = ",\n ") %>%
# writeLines(con = "clipboard")
mutate(sediment = case_match(
sediment,
"many epi cell casts" ~ "many epithelial cell",
"many epithelial cell casts" ~ "many epithelial cell",
"many granular casts" ~ "many granular",
"muddy brown" ~ "muddy brown",
"muddy brown casts" ~ "muddy brown",
"rare gran casts" ~ "rare granular",
"rare granular casts" ~ "rare granular",
.default = sediment
)) %>%
mutate(across(hd_catheter:av_fistula,
~if_else(str_detect(.x,"^(?i)N"),"No","Yes"))) %>%
arrange(study_id)
#| warning: false
list_of_data_to_clean$messy_aki.xlsx %>%
# Extract only the essential rows
slice(5:25) %>%
# Remove empty columns
select(-6) %>%
# Set the first row as column names
set_names(.,.[1,]) %>%
# Remove redudant first row
slice(-1) %>%
# Tidy column names
rename_with(~tolower(str_replace(.x, "^(?i)day.*?(\\d).*","day\\1_gfr"))) %>%
rename_with(~str_replace_all(.x,"\\s+","_")) %>%
# Tidy the entries of birthdate column
arrange(desc(dob)) %>% # Arrange to detect patterns of anomalies
# Convert 5-digit general numbers to ISO dates
mutate(dob_temp = openxlsx::convertToDate(dob), .after = dob) %>%
# Edit special cases
mutate(dob_temp = case_match(dob, "may 5 1970" ~ ymd("1970-05-05"), "5=11-1984"~ ymd("1984-05-11"), .default = dob_temp))  %>%
# Rename "dob" to "birthdate" and remove "dob", "dob_temp"
mutate(birthdate = dob_temp, .after = study_id) %>%
select(-dob_temp,-dob) %>%
mutate(race = str_to_sentence(race)) %>%
mutate(sex = if_else(str_detect(sex,"^(?i)M"), "Male","Female")) %>%
mutate(hispanic = if_else(str_detect(hispanic, "^(?i)N"), "Not Hispanic", "Hispanic")) %>%
mutate(day2_gfr_poor = if_else(str_detect(day2_gfr,"poor"),1,0)) %>%
mutate(across(c(study_id,admission_gfr:day5_gfr), ~as.integer(str_extract(.x,"^\\d+")))) %>%
# count(sediment) %>%
# pull(sediment) %>%
# cbind %>%
# map2(.y = c(
#   "\" ~ \"many epithelial cell",
#   "\" ~ \"many epithelial cell",
#   "\" ~ \"many granular",
#   "\" ~ \"muddy brown",
#   "\" ~ \"muddy brown",
#   "\" ~ \"rare granular",
#   "\" ~ \"rare granular"), .f = ~paste0(.x,.y)) %>%
# unlist %>%
# paste0("\"",.,"\"", collapse = ",\n ") %>%
# writeLines(con = "clipboard")
mutate(sediment = case_match(
sediment,
"many epi cell casts" ~ "many epithelial cell",
"many epithelial cell casts" ~ "many epithelial cell",
"many granular casts" ~ "many granular",
"muddy brown" ~ "muddy brown",
"muddy brown casts" ~ "muddy brown",
"rare gran casts" ~ "rare granular",
"rare granular casts" ~ "rare granular",
.default = sediment
)) %>%
mutate(across(hd_catheter:av_fistula,
~if_else(str_detect(.x,"^(?i)N"),"No","Yes"))) %>%
arrange(study_id) -> pv_wide_aki
pv_wide_aki
pv_wide_aki
pv_wide_aki %>%
pivot_longer(cols = admission_gfr:day5_gfr,
names_to = "Day",
values_to = "GFR")
pv_wide_aki %>%
pivot_longer(cols = admission_gfr:day5_gfr,
names_to = "Day",
values_to = "GFR") %>%
mutatee(Day = factor(Day, levels = levels(Day), labels = 0:5))
pv_wide_aki %>%
pivot_longer(cols = admission_gfr:day5_gfr,
names_to = "Day",
values_to = "GFR") %>%
mutate(Day = factor(Day, levels = levels(Day), labels = 0:5))
pv_wide_aki %>%
pivot_longer(cols = admission_gfr:day5_gfr,
names_to = "Day",
values_to = "GFR")
paste0("admission",day,1:46,"_gfr")
paste0(c("admission",day,1:46,"_gfr"))
paste0(c("admission","day",1:46,"_gfr"))
paste0(c("admission","day",1:5,"_gfr"))
paste0("admission","day",1:5,"_gfr")
paste0(c("admission","day",1:5),"_gfr")
paste0(c("admission",c("day",1:5)),"_gfr")
paste0(c("admission",paste0("day",1:5)),"_gfr")
pv_wide_aki %>%
pivot_longer(cols = admission_gfr:day5_gfr,
names_to = "Day",
values_to = "GFR") %>%
mutate(Day = factor(Day, levels = paste0(c("admission",paste0("day",1:5)),"_gfr"), labels = 0:5))
pv_wide_aki %>%
pivot_longer(cols = admission_gfr:day5_gfr,
names_to = "Day",
values_to = "GFR") %>%
mutate(Day = factor(Day,
levels = paste0(c("admission",
paste0("day",1:5)),
"_gfr"),
labels = 0:5))
pv_wide_aki %>%
pivot_longer(cols = admission_gfr:day5_gfr,
names_to = "Day",
values_to = "GFR") %>%
mutate(Day = factor(Day,
levels = paste0(c("admission",
paste0("day",1:5)),
"_gfr"),
labels = 0:5,
ordered = T))
pv_wide_aki %>%
pivot_longer(cols = admission_gfr:day5_gfr,
names_to = "Day",
values_to = "GFR") %>%
mutate(Day = factor(Day,
levels = paste0(c("admission",
paste0("day",1:5)),
"_gfr"),
labels = 0:5,
ordered = T)) -> tidy_aki
view(tidy_aki)
write_csv(tidy_aki,"tidy_aki.csv")
#| message: false
#| warning: false
# install.packages("tidyverse")
library(tidyverse)
base_names %>%
map(~readxl::read_xlsx(.x,col_names = F)) %>%
set_names(base_names)  -> list_of_data_to_clean
base_names %>%
map(~readxl::read_xlsx(.x,col_names = F)) %>%
set_names(base_names)  -> list_of_data_to_clean
main_path <- "https://github.com/higgi13425/medicaldata/raw/master/data-raw/messy_data/"
base_names <- paste0("messy_",c("infarct","glucose","aki","bp"),".xlsx")
base_names %>%
map(~readxl::read_xlsx(.x,col_names = F)) %>%
set_names(base_names)  -> list_of_data_to_clean
list_of_data_to_clean
base_names
paste0(main_path,base_names)
base_names %>%
map(~readxl::read_xlsx(.x,col_names = F)) %>%
set_names(base_names)  -> list_of_data_to_clean
list_of_data_to_clean
base_names %>%
map(~readxl::read_xlsx(.x,col_names = F)) %>%
set_names(base_names)  -> list_of_data_to_clean
list_of_data_to_clean
base_names %>%
map(~readxl::read_xlsx(.x,col_names = F)) %>%
set_names(base_names)  -> list_of_data_to_clean
base_names %>%
map(~readxl::read_xlsx(.x,col_names = F)) %>%
set_names(base_names)  -> list_of_data_to_clean
list_of_data_to_clean
base_names %>%
map(~readxl::read_xlsx(.x,col_names = F)) %>%
set_names(base_names)  -> list_of_data_to_clean
list_of_data_to_clean
base_names %>%
base_names %>%
#| message: false
#| warning: false
# install.packages("tidyverse")
library(tidyverse)
main_path <- "https://github.com/higgi13425/medicaldata/raw/master/data-raw/messy_data/"
base_names <- paste0("messy_",c("infarct","glucose","aki","bp"),".xlsx")
base_names %>%
map(~readxl::read_xlsx(.x,col_names = F)) %>%
set_names(base_names)  -> list_of_data_to_clean
list_of_data_to_clean
View(list_of_data_to_clean)
View(list_of_data_to_clean[["messy_infarct.xlsx"]])
list_of_data_to_clean %>%
map(~view(.x))
list_of_data_to_clean %>%
map(~view(.x))
list_of_data_to_clean[[1]]
list_of_data_to_clean[[1]]
list_of_data_to_clean[[1]] %>%
map(~.[!is.na(.)])
list_of_data_to_clean[[1]] %>%
map(~.[!is.na(.)]) %>%
head(3)
ist_of_data_to_clean[[1]] %>%
map(~.[!is.na(.)]) %>%
head(3) %>%
map(~unique(.x))
list_of_data_to_clean[[1]] %>%
map(~.[!is.na(.)]) %>%
head(3) %>%
map(~unique(.x))
list_of_data_to_clean[[1]] %>%
map(~.[!is.na(.)]) %>%
head(3) %>%
map(~unique(.x))
# Extracting Row Factor Combinations; factor level order matters
list_of_data_to_clean[[1]] %>%
map(~.[!is.na(.)]) %>%
head(3) %>%
map(~unique(.x)) -> row_cmbn_names
list_of_data_to_clean[[1]] %>%
map(~.[!is.na(.)]) %>%
head(3) %>%
map(~unique(.x))
list_of_data_to_clean[[1]] %>%
map(~.[!is.na(.)]) %>%
head(3) %>%
map(~unique(.x))
list_of_data_to_clean[[1]] %>%
map(~.[!is.na(.)]) %>%
head(3) %>%
map(~unique(.x))
list_of_data_to_clean$messy_glucose.xlsx
list_of_data_to_clean$messy_glucose.xlsx
list_of_data_to_clean$messy_glucose.xlsx %>%
# Remove title headers, legends and empty columns
"["(c(4:12,16:29),-5)
list_of_data_to_clean$messy_glucose.xlsx %>%
# Remove title headers, legends and empty columns
"["(c(4:12,16:29),-5) %>%
# Set first row as column headers
set_names(.,.[1,])
list_of_data_to_clean$messy_glucose.xlsx %>%
# Remove title headers, legends and empty columns
"["(c(4:12,16:29),-5) %>%
# Set first row as column headers
set_names(.,.[1,]) %>%
# Remove redundant (first) row
slice(-1)
list_of_data_to_clean$messy_glucose.xlsx %>%
# Remove title headers, legends and empty columns
"["(c(4:12,16:29),-5) %>%
# Set first row as column headers
set_names(.,.[1,]) %>%
# Remove redundant (first) row
slice(-1) %>%
# Remove redundant "glucose" prefix in the last two columns and lower-case all
rename_with(~tolower(str_replace(.x, "^glucose\\s+(\\w+)$","\\1")))
list_of_data_to_clean$messy_glucose.xlsx %>%
# Remove title headers, legends and empty columns
"["(c(4:12,16:29),-5) %>%
# Set first row as column headers
set_names(.,.[1,]) %>%
# Remove redundant (first) row
slice(-1)
list_of_data_to_clean$messy_glucose.xlsx %>%
# Remove title headers, legends and empty columns
"["(c(4:12,16:29),-5) %>%
# Set first row as column headers
set_names(.,.[1,]) %>%
# Remove redundant (first) row
slice(-1) %>%
# Remove redundant "glucose" prefix in the last two columns and lower-case all
rename_with(~tolower(str_replace(.x, "^glucose\\s+(\\w+)$","\\1")))
list_of_data_to_clean$messy_glucose.xlsx %>%
# Remove title headers, legends and empty columns
"["(c(4:12,16:29),-5) %>%
# Set first row as column headers
set_names(.,.[1,]) %>%
# Remove redundant (first) row
slice(-1) %>%
# Remove redundant "glucose" prefix in the last two columns and lower-case all
rename_with(~tolower(str_replace(.x, "^glucose\\s+(\\w+)$","\\1")))
list_of_data_to_clean$messy_glucose.xlsx %>%
# Remove title headers, legends and empty columns
"["(c(4:12,16:29),-5) %>%
# Set first row as column headers
set_names(.,.[1,]) %>%
# Remove redundant (first) row
slice(-1) %>%
# Remove redundant "glucose" prefix in the last two columns and lower-case all
rename_with(~tolower(str_replace(.x, "^glucose\\s+(\\w+)$","\\1"))) %>%
# Rename "dofb" as "birthdate" and excel 5-digit general # to actual ISO dates
mutate(dofb = openxlsx::convertToDate(dofb)) %>%
rename(birthdate = dofb) %>%
# mutate columns to appropriate data types
mutate(
pat_id = as.integer(pat_id),
race = factor(race, levels = 1:5, labels = c("White","Black","Asian","NatAm","Hawaii/PI")),
sex = factor(sex, levels = 1:2, labels = c("Male","Female")),
across(pre:post, ~round(as.numeric(.x),1)))
list_of_data_to_clean$messy_glucose.xlsx %>%
# Remove title headers, legends and empty columns
"["(c(4:14,16:29),-5) %>%
# Set first row as column headers
set_names(.,.[1,]) %>%
# Remove redundant (first) row
slice(-1) %>%
# Remove redundant "glucose" prefix in the last two columns and lower-case all
rename_with(~tolower(str_replace(.x, "^glucose\\s+(\\w+)$","\\1"))) %>%
# Rename "dofb" as "birthdate" and excel 5-digit general # to actual ISO dates
mutate(dofb = openxlsx::convertToDate(dofb)) %>%
rename(birthdate = dofb) %>%
# mutate columns to appropriate data types
mutate(
pat_id = as.integer(pat_id),
race = factor(race, levels = 1:5, labels = c("White","Black","Asian","NatAm","Hawaii/PI")),
sex = factor(sex, levels = 1:2, labels = c("Male","Female")),
across(pre:post, ~round(as.numeric(.x),1))) -> tidy_glucose
tidy_glucose
write_csv(tidy_glucose,"tidy_glucose.csv")
write_csv(tidy_glucose,"tidy_glucose.csv")
list_of_data_to_clean$messy_aki.xlsx
#| warning: false
list_of_data_to_clean$messy_aki.xlsx %>%
names
#| warning: false
list_of_data_to_clean$messy_aki.xlsx %>%
names
#| warning: false
list_of_data_to_clean$messy_aki.xlsx %>%
names
#| warning: false
list_of_data_to_clean$messy_aki.xlsx %>%
names
#| warning: false
list_of_data_to_clean$messy_aki.xlsx %>%
names
#| warning: false
list_of_data_to_clean$messy_aki.xlsx %>%
names
# Extract only the essential rows
slice(5:25) %>%
# Remove empty columns
select(-6) %>%
# Set the first row as column names
set_names(.,.[1,]) %>%
# Remove redudant first row
slice(-1) %>%
# Tidy column names
rename_with(~tolower(str_replace(.x, "^(?i)day.*?(\\d).*","day\\1_gfr"))) %>%
rename_with(~str_replace_all(.x,"\\s+","_")) %>%
# Tidy the entries of birthdate column
arrange(desc(dob)) %>% # Arrange to detect patterns of anomalies
# Convert 5-digit general numbers to ISO dates
mutate(dob_temp = openxlsx::convertToDate(dob), .after = dob) %>%
# Edit special cases
mutate(dob_temp = case_match(dob, "may 5 1970" ~ ymd("1970-05-05"), "5=11-1984"~ ymd("1984-05-11"), .default = dob_temp))  %>%
# Rename "dob" to "birthdate" and remove "dob", "dob_temp"
mutate(birthdate = dob_temp, .after = study_id) %>%
select(-dob_temp,-dob) %>%
mutate(race = str_to_sentence(race)) %>%
mutate(sex = if_else(str_detect(sex,"^(?i)M"), "Male","Female")) %>%
mutate(hispanic = if_else(str_detect(hispanic, "^(?i)N"), "Not Hispanic", "Hispanic")) %>%
mutate(day2_gfr_poor = if_else(str_detect(day2_gfr,"poor"),1,0)) %>%
mutate(across(c(study_id,admission_gfr:day5_gfr), ~as.integer(str_extract(.x,"^\\d+")))) %>%
count(sediment)
#| warning: false
list_of_data_to_clean$messy_aki.xlsx %>%
# Extract only the essential rows
slice(5:25) %>%
# Remove empty columns
select(-6) %>%
# Set the first row as column names
set_names(.,.[1,]) %>%
# Remove redudant first row
slice(-1) %>%
# Tidy column names
rename_with(~tolower(str_replace(.x, "^(?i)day.*?(\\d).*","day\\1_gfr"))) %>%
rename_with(~str_replace_all(.x,"\\s+","_")) %>%
# Tidy the entries of birthdate column
arrange(desc(dob)) %>% # Arrange to detect patterns of anomalies
# Convert 5-digit general numbers to ISO dates
mutate(dob_temp = openxlsx::convertToDate(dob), .after = dob) %>%
# Edit special cases
mutate(dob_temp = case_match(dob, "may 5 1970" ~ ymd("1970-05-05"), "5=11-1984"~ ymd("1984-05-11"), .default = dob_temp))  %>%
# Rename "dob" to "birthdate" and remove "dob", "dob_temp"
mutate(birthdate = dob_temp, .after = study_id) %>%
select(-dob_temp,-dob) %>%
mutate(race = str_to_sentence(race)) %>%
mutate(sex = if_else(str_detect(sex,"^(?i)M"), "Male","Female")) %>%
mutate(hispanic = if_else(str_detect(hispanic, "^(?i)N"), "Not Hispanic", "Hispanic")) %>%
mutate(day2_gfr_poor = if_else(str_detect(day2_gfr,"poor"),1,0)) %>%
mutate(across(c(study_id,admission_gfr:day5_gfr), ~as.integer(str_extract(.x,"^\\d+")))) %>%
count(sediment)
#| warning: false
list_of_data_to_clean$messy_aki.xlsx %>%
# Extract only the essential rows
slice(5:25) %>%
# Remove empty columns
select(-6) %>%
# Set the first row as column names
set_names(.,.[1,]) %>%
# Remove redudant first row
slice(-1) %>%
# Tidy column names
rename_with(~tolower(str_replace(.x, "^(?i)day.*?(\\d).*","day\\1_gfr"))) %>%
rename_with(~str_replace_all(.x,"\\s+","_")) %>%
# Tidy the entries of birthdate column
arrange(desc(dob)) %>% # Arrange to detect patterns of anomalies
# Convert 5-digit general numbers to ISO dates
mutate(dob_temp = openxlsx::convertToDate(dob), .after = dob) %>%
# Edit special cases
mutate(dob_temp = case_match(dob, "may 5 1970" ~ ymd("1970-05-05"), "5=11-1984"~ ymd("1984-05-11"), .default = dob_temp))  %>%
# Rename "dob" to "birthdate" and remove "dob", "dob_temp"
mutate(birthdate = dob_temp, .after = study_id) %>%
select(-dob_temp,-dob) %>%
mutate(race = str_to_sentence(race)) %>%
mutate(sex = if_else(str_detect(sex,"^(?i)M"), "Male","Female")) %>%
mutate(hispanic = if_else(str_detect(hispanic, "^(?i)N"), "Not Hispanic", "Hispanic")) %>%
mutate(day2_gfr_poor = if_else(str_detect(day2_gfr,"poor"),1,0)) %>%
mutate(across(c(study_id,admission_gfr:day5_gfr), ~as.integer(str_extract(.x,"^\\d+")))) %>%
count(sediment) %>%
pull(sediment) %>%
cbind
