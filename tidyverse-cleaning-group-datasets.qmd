---
title: "Data Cleaning Project 1"
subtitle: "STT157: Exploratory Data Analysis"
author: "**Prof. Rey R. Cuenca**<br/>*Math-Stat Dept., MSU-IIT*"
format: html
editor: visual
# fontsize: 12pt
toc: true
---

## Loading R Packages

```{r}
#| message: false
#| warning: false

# install.packages("tidyverse")
library(tidyverse)
```

## Getting the Data Sets

| Group No. | Members                                            | Data Set                                                                                                     | Link Base Name     |
|------------|--------------|----------------------------------|------------|
| 1         | Jalop , Bobadilla, Tagbo, Badelles, Bayal, Inutan  | [Messy Infarct](https://github.com/higgi13425/medicaldata/raw/master/data-raw/messy_data/messy_infarct.xlsx) | messy_infarct.xlsx |
| 2         | Bajao, Gapol, Mainit, Mancera, Plaza, Revelo       | [Messy Glucose](https://github.com/higgi13425/medicaldata/raw/master/data-raw/messy_data/messy_glucose.xlsx) | messy_glucose.xlsx |
| 3         | Abaya, Indino, Lucaser, Manos, Rabago, Tala        | [Messy Aki](https://github.com/higgi13425/medicaldata/raw/master/data-raw/messy_data/messy_aki.xlsx)         | messy_aki.xlsx     |
| 4         | Barlisan, Daluran, Lumayag, Pasco, Telmoso, Tercio | [Messy BP](https://github.com/higgi13425/medicaldata/raw/master/data-raw/messy_data/messy_bp.xlsx)           | messy_bp.xlsx      |

: Groupings and Data Sets

```{r}
main_path <- "https://github.com/higgi13425/medicaldata/raw/master/data-raw/messy_data/"
base_names <- paste0("messy_",c("infarct","glucose","aki","bp"),".xlsx")
```

```{r}
#| eval: false

paste0(main_path,base_names) %>% 
  map(~{
  download.file(
    url = .x,
    destfile = paste0("./",basename(.)),
    mode = "wb") # exclude mode = "wb" if you are not using Windows system
  })
```

## Reading the Data Set

```{r}
base_names %>% 
  map(~readxl::read_xlsx(.x,col_names = F)) %>% 
  set_names(base_names)  -> list_of_data_to_clean
list_of_data_to_clean
```

## Initial Inspection of the Data

```{r}
View(list_of_data_to_clean)
```

```{r}
#| eval: false

glimpse(list_of_data_to_clean)
str(list_of_data_to_clean)
```

```{r}
list_of_data_to_clean %>% 
  map(~view(.x))
```

Initial inspection of the list of data set shows that `infarct` is a pivot (wide crosstabulation) table, while the others are longer type (i.e. closer resemblance to a tidy data). However, it should that the `messy_aki` data can be treated as a pivot wide table. Several tidy principles have been violated.

## Actual Tidying of Messy Cirrhosis Data

### Messy Infarct

#### Step 1: Create tidy combinations of row and column factor level combinations without NAs

head(3) %\>%

map(\~unique(.x))

```{r}
# Extracting Row Factor Combinations; factor level order matters
list_of_data_to_clean[[1]] %>% 
  map(~.[!is.na(.)]) %>% 
  head(3) %>% 
  map(~unique(.x)) -> row_cmbn_names

```

```{r}
# Extacting Column Names for Row Factor Combination; factor level order matters
row_cmbn_names %>% 
  map(~head(.x,1))

# Extacting Row Factor Levels
row_cmbn_names %>% 
  map(~`[`(.x,-1)) # excluding Hspanic; factor level order matters

# Row Factor Level Combinations of Pivot Table

expand_grid(
      Race = c("American Indian or Alaska Native","Asian", "Black or African-American", "Native Hawaiian or Other Pacific Islander","White"),
      Hispanic = c("Hispanic","Not Hispanic"),
      Sex = c("Male","Female")
    ) -> RHS_v


# Column Factor Level Combination of Pivot Table
statin_id <- c("siY","siN") # ID whether the patient has takin Statin ("Statin Yes")                            # or not ("Statin No")
statin_arm <- c("saL","saR") # ID whether pain is felt in left arm (first two                                   # columns of counts) or in the right arm (last two)
mi_id <- c("miY","miN") # ID whether the patient experience Myo.Infarc. a.k.a 
                            # "heart attack"

expand_grid(statin_id, statin_arm, mi_id) %>% # Create the combination
  unite(SSM, statin_id:mi_id, sep = ".") %>% # Create the list of column names for                                              # the counts
  pull(SSM) -> SSM_v # pull out the names

```

```{r}
# Creating the Column Names and filling the Row Factor Level Combinations
pv_infarct <- list_of_data_to_clean$messy_infarct.xlsx %>% 
  "["(4:23,5:12) %>% # Extract counts only
  set_names(SSM_v) %>% # Set the names column factor combinations
  bind_cols(RHS_v, .) # the dot here means to include the counts table right  
                      # after the new columns
pv_infarct
```

#### Step 2: Create the longer version of the pivot table, modify column variable data types and export (save) as csv file.

```{r}
pv_infarct %>% 
  pivot_longer(cols = siY.saL.miY:siN.saR.miN,
               names_to = "SSM",
               values_to = "counts") %>% 
  separate(col = SSM, into = c("statin_id","statin_arm","mi_id")) %>% 
  mutate(counts = as.integer(counts)) %>% 
  mutate(across(where(is.character), ~as_factor(.x))) %>% 
  mutate(statin_id = factor(statin_id, 
                            levels = levels(statin_id), 
                            labels = c("Yes","No")),
         statin_arm = factor(statin_arm,
                             levels = levels(statin_arm),
                             labels = c("Left", "Right")),
         mi_id = factor(mi_id,
                             levels = levels(mi_id),
                             labels = c("Yes", "No"))) %>% 
  write_csv("./tidy_infarct.csv")
```

### Messy Glucose

```{r}
list_of_data_to_clean$messy_glucose.xlsx %>% 
  # Remove title headers, legends and empty columns
  "["(c(4:14,16:29),-5) %>%
  # Set first row as column headers
  set_names(.,.[1,]) %>% 
  # Remove redundant (first) row
  slice(-1) %>% 
  # Remove redundant "glucose" prefix in the last two columns and lower-case all
  rename_with(~tolower(str_replace(.x, "^glucose\\s+(\\w+)$","\\1"))) %>% 
  # Rename "dofb" as "birthdate" and excel 5-digit general # to actual ISO dates
  mutate(dofb = openxlsx::convertToDate(dofb)) %>% 
  rename(birthdate = dofb) %>% 
  # mutate columns to appropriate data types
  mutate(
    pat_id = as.integer(pat_id),
    race = factor(race, levels = 1:5, labels = c("White","Black","Asian","NatAm","Hawaii/PI")),
    sex = factor(sex, levels = 1:2, labels = c("Male","Female")),
    across(pre:post, ~round(as.numeric(.x),1))) -> tidy_glucose

tidy_glucose
```

```{r}
write_csv(tidy_glucose,"tidy_glucose.csv")
```

### Messy AKI

```{r}
#| warning: false
list_of_data_to_clean$messy_aki.xlsx %>% 
  # Extract only the essential rows
  slice(5:25) %>% 
  # Remove empty columns
  select(-6) %>% 
  # Set the first row as column names
  set_names(.,.[1,]) %>% 
  # Remove redudant first row
  slice(-1) %>% 
  # Tidy column names
  rename_with(~tolower(str_replace(.x, "^(?i)day.*?(\\d).*","day\\1_gfr"))) %>% 
  rename_with(~str_replace_all(.x,"\\s+","_")) %>% 
  # Tidy the entries of birthdate column
  arrange(desc(dob)) %>% # Arrange to detect patterns of anomalies
  # Convert 5-digit general numbers to ISO dates
  mutate(dob_temp = openxlsx::convertToDate(dob), .after = dob) %>% 
  # Edit special cases
  mutate(dob_temp = case_match(dob, "may 5 1970" ~ ymd("1970-05-05"), "5=11-1984"~ ymd("1984-05-11"), .default = dob_temp))  %>% 
  # Rename "dob" to "birthdate" and remove "dob", "dob_temp"
  mutate(birthdate = dob_temp, .after = study_id) %>% 
  select(-dob_temp,-dob) %>% 
  mutate(race = str_to_sentence(race)) %>% 
  mutate(sex = if_else(str_detect(sex,"^(?i)M"), "Male","Female")) %>% 
  mutate(hispanic = if_else(str_detect(hispanic, "^(?i)N"), "Not Hispanic", "Hispanic")) %>% 
  mutate(day2_gfr_poor = if_else(str_detect(day2_gfr,"poor"),1,0)) %>% 
  mutate(across(c(study_id,admission_gfr:day5_gfr), ~as.integer(str_extract(.x,"^\\d+")))) %>% 
  # count(sediment) %>%
  # pull(sediment) %>%
  # cbind %>% 
  # map2(.y = c(
  #   "\" ~ \"many epithelial cell",
  #   "\" ~ \"many epithelial cell",
  #   "\" ~ \"many granular",
  #   "\" ~ \"muddy brown",
  #   "\" ~ \"muddy brown",
  #   "\" ~ \"rare granular",
  #   "\" ~ \"rare granular"), .f = ~paste0(.x,.y)) %>%
  # unlist %>%
  # paste0("\"",.,"\"", collapse = ",\n ") %>%
  # writeLines(con = "clipboard")
mutate(sediment = case_match(
  sediment,
"many epi cell casts" ~ "many epithelial cell",
 "many epithelial cell casts" ~ "many epithelial cell",
 "many granular casts" ~ "many granular",
 "muddy brown" ~ "muddy brown",
 "muddy brown casts" ~ "muddy brown",
 "rare gran casts" ~ "rare granular",
 "rare granular casts" ~ "rare granular",
.default = sediment
)) %>% 
  mutate(across(hd_catheter:av_fistula, 
                ~if_else(str_detect(.x,"^(?i)N"),"No","Yes"))) %>% 
  arrange(study_id) -> pv_wide_aki

pv_wide_aki
```

```{r}
pv_wide_aki %>% 
  pivot_longer(cols = admission_gfr:day5_gfr,
               names_to = "Day", 
               values_to = "GFR") %>% 
  mutate(Day = factor(Day, 
                      levels = paste0(c("admission",
                                             paste0("day",1:5)),
                                           "_gfr"),
                      labels = 0:5,
                      ordered = T)) -> tidy_aki

view(tidy_aki)
```

```{r}
write_csv(tidy_aki,"tidy_aki.csv")
```
